package com.zamaz.mcp.security.pentest;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

/**
 * Penetration tests for common security vulnerabilities.
 * Based on OWASP Top 10 2021.
 */
@SpringBootTest
@AutoConfigureMockMvc
@ActiveProfiles("test")
public class PenetrationTest {
    
    @Autowired
    private MockMvc mockMvc;
    
    /**
     * A01:2021 – Broken Access Control
     */
    @Test
    public void testBrokenAccessControl() throws Exception {
        // Attempt to access admin endpoint without authentication
        mockMvc.perform(get("/api/v1/admin/users"))
                .andExpect(status().isUnauthorized());
        
        // Attempt to access another user's data
        mockMvc.perform(get("/api/v1/users/12345"))
                .andExpect(status().isUnauthorized());
        
        // Attempt to bypass authentication with direct object reference
        mockMvc.perform(get("/api/v1/users/../admin/config"))
                .andExpect(status().isBadRequest());
        
        // Test for IDOR (Insecure Direct Object Reference)
        mockMvc.perform(put("/api/v1/users/profile")
                .contentType(MediaType.APPLICATION_JSON)
                .content("""
                    {
                        "id": "another-user-id",
                        "email": "hacker@evil.com"
                    }
                    """))
                .andExpect(status().isUnauthorized());
    }
    
    /**
     * A02:2021 – Cryptographic Failures
     */
    @Test
    public void testCryptographicFailures() throws Exception {
        // Test password is not returned in response
        mockMvc.perform(post("/api/v1/auth/register")
                .contentType(MediaType.APPLICATION_JSON)
                .content("""
                    {
                        "username": "crypto_test",
                        "email": "crypto@test.com",
                        "password": "SecurePassword123!"
                    }
                    """))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.password").doesNotExist())
                .andExpect(content().string(org.hamcrest.Matchers.not(
                    org.hamcrest.Matchers.containsString("SecurePassword123!"))));
        
        // Test sensitive data is not in URL
        mockMvc.perform(get("/api/v1/auth/reset-password?token=sensitive_token"))
                .andExpect(status().isOk());
        
        // Verify token is not logged (would check logs in real test)
    }
    
    /**
     * A03:2021 – Injection
     */
    @Test
    public void testInjectionAttacks() throws Exception {
        // SQL Injection attempts
        String[] sqlInjectionPayloads = {
            "' OR '1'='1",
            "'; DROP TABLE users; --",
            "1' UNION SELECT * FROM users--",
            "admin'--",
            "' OR 1=1--",
            "\" OR 1=1--",
            "' OR 'a'='a",
            "') OR ('a'='a",
            "' OR password LIKE '%",
            "1' AND '1'='1"
        };
        
        for (String payload : sqlInjectionPayloads) {
            mockMvc.perform(get("/api/v1/users")
                    .param("search", payload))
                    .andExpect(status().isBadRequest());
            
            mockMvc.perform(post("/api/v1/auth/login")
                    .contentType(MediaType.APPLICATION_JSON)
                    .content("""
                        {
                            "username": "%s",
                            "password": "password"
                        }
                        """.formatted(payload)))
                    .andExpect(status().is4xxClientError());
        }
        
        // NoSQL Injection attempts
        mockMvc.perform(post("/api/v1/auth/login")
                .contentType(MediaType.APPLICATION_JSON)
                .content("""
                    {
                        "username": {"$ne": null},
                        "password": {"$ne": null}
                    }
                    """))
                .andExpect(status().isBadRequest());
        
        // Command Injection attempts
        String[] commandInjectionPayloads = {
            "; ls -la",
            "| whoami",
            "`id`",
            "$(cat /etc/passwd)",
            "; cat /etc/passwd",
            "& ping -c 10 127.0.0.1 &"
        };
        
        for (String payload : commandInjectionPayloads) {
            mockMvc.perform(get("/api/v1/export")
                    .param("filename", payload))
                    .andExpect(status().is4xxClientError());
        }
        
        // LDAP Injection
        mockMvc.perform(get("/api/v1/users")
                .param("filter", "*(uid=*)"))
                .andExpect(status().isBadRequest());
        
        // XPath Injection
        mockMvc.perform(get("/api/v1/search")
                .param("query", "' or '1'='1"))
                .andExpect(status().isBadRequest());
    }
    
    /**
     * A04:2021 – Insecure Design
     */
    @Test
    public void testInsecureDesign() throws Exception {
        // Test account enumeration protection
        mockMvc.perform(post("/api/v1/auth/forgot-password")
                .contentType(MediaType.APPLICATION_JSON)
                .content("""
                    {
                        "email": "nonexistent@example.com"
                    }
                    """))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.message").value("If the email exists, a reset link has been sent"));
        
        // Test rate limiting on sensitive endpoints
        for (int i = 0; i < 10; i++) {
            mockMvc.perform(post("/api/v1/auth/login")
                    .contentType(MediaType.APPLICATION_JSON)
                    .content("""
                        {
                            "username": "test",
                            "password": "wrong"
                        }
                        """));
        }
        
        // Next request should be rate limited
        mockMvc.perform(post("/api/v1/auth/login")
                .contentType(MediaType.APPLICATION_JSON)
                .content("""
                    {
                        "username": "test",
                        "password": "wrong"
                    }
                    """))
                .andExpect(status().isTooManyRequests());
    }
    
    /**
     * A05:2021 – Security Misconfiguration
     */
    @Test
    public void testSecurityMisconfiguration() throws Exception {
        // Test debug endpoints are disabled
        mockMvc.perform(get("/debug"))
                .andExpect(status().isNotFound());
        
        // Test stack traces are not exposed
        mockMvc.perform(get("/api/v1/error/test"))
                .andExpect(status().is4xxClientError())
                .andExpect(content().string(org.hamcrest.Matchers.not(
                    org.hamcrest.Matchers.containsString("java.lang"))));
        
        // Test default credentials don't work
        mockMvc.perform(post("/api/v1/auth/login")
                .contentType(MediaType.APPLICATION_JSON)
                .content("""
                    {
                        "username": "admin",
                        "password": "admin"
                    }
                    """))
                .andExpect(status().isUnauthorized());
        
        // Test security headers are present
        mockMvc.perform(get("/api/v1/health"))
                .andExpect(header().exists("X-Content-Type-Options"))
                .andExpect(header().exists("X-Frame-Options"))
                .andExpect(header().exists("X-XSS-Protection"));
        
        // Test HTTP methods are restricted
        mockMvc.perform(request("TRACE", "/api/v1/users"))
                .andExpect(status().isMethodNotAllowed());
    }
    
    /**
     * A06:2021 – Vulnerable and Outdated Components
     */
    @Test
    public void testVulnerableComponents() throws Exception {
        // This would typically be done by dependency scanning
        // Here we test that version information is not exposed
        mockMvc.perform(get("/api/v1/version"))
                .andExpect(status().isNotFound());
        
        mockMvc.perform(get("/"))
                .andExpect(header().doesNotExist("Server"))
                .andExpect(header().doesNotExist("X-Powered-By"));
    }
    
    /**
     * A07:2021 – Identification and Authentication Failures
     */
    @Test
    public void testAuthenticationFailures() throws Exception {
        // Test weak password is rejected
        mockMvc.perform(post("/api/v1/auth/register")
                .contentType(MediaType.APPLICATION_JSON)
                .content("""
                    {
                        "username": "weakpass",
                        "email": "weak@test.com",
                        "password": "123456"
                    }
                    """))
                .andExpect(status().isBadRequest());
        
        // Test session fixation protection
        String sessionId = "fixed-session-id";
        mockMvc.perform(post("/api/v1/auth/login")
                .header("X-Session-Id", sessionId)
                .contentType(MediaType.APPLICATION_JSON)
                .content("""
                    {
                        "username": "test@example.com",
                        "password": "TestPassword123!"
                    }
                    """))
                .andExpect(header().doesNotExist("X-Session-Id"));
        
        // Test credential stuffing protection
        String[] commonPasswords = {
            "password", "123456", "password123", "admin", "letmein",
            "qwerty", "123456789", "12345678", "12345", "1234567"
        };
        
        for (String password : commonPasswords) {
            mockMvc.perform(post("/api/v1/auth/register")
                    .contentType(MediaType.APPLICATION_JSON)
                    .content("""
                        {
                            "username": "common_pass_%s",
                            "email": "common_%s@test.com",
                            "password": "%s"
                        }
                        """.formatted(password, password, password)))
                    .andExpect(status().isBadRequest());
        }
    }
    
    /**
     * A08:2021 – Software and Data Integrity Failures
     */
    @Test
    public void testDataIntegrityFailures() throws Exception {
        // Test insecure deserialization
        mockMvc.perform(post("/api/v1/data/import")
                .contentType(MediaType.APPLICATION_JSON)
                .content("""
                    {
                        "data": "rO0ABXNyABdqYXZhLnV0aWwuUHJpb3JpdHlRdWV1ZZ